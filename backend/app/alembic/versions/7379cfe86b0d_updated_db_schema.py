"""Updated db schema

Revision ID: 7379cfe86b0d
Revises: 
Create Date: 2025-03-20 17:07:58.339694

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7379cfe86b0d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('auth_id', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=False),
    sa.Column('last_name', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('auth_id'),
    sa.UniqueConstraint('email')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.drop_index('ix_addresses_id', table_name='addresses')
    op.drop_table('addresses')
    op.add_column('address', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.alter_column('address', 'country',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('address', 'administrative_area',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('address', 'locality',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('address', 'postal_code',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('address', 'street',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('address', 'latitude',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.DECIMAL(precision=10, scale=7),
               existing_nullable=True)
    op.alter_column('address', 'longitude',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.DECIMAL(precision=10, scale=7),
               existing_nullable=True)
    op.alter_column('address', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_address_id'), 'address', ['id'], unique=False)
    op.add_column('address_test_table', sa.Column('latitude', sa.DECIMAL(precision=10, scale=7), nullable=True))
    op.add_column('address_test_table', sa.Column('longitude', sa.DECIMAL(precision=10, scale=7), nullable=True))
    op.add_column('address_test_table', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('address_test_table', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.alter_column('address_test_table', 'country',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('address_test_table', 'administrative_area',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('address_test_table', 'locality',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('address_test_table', 'postal_code',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('address_test_table', 'street',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_constraint('unique_address_constraint', 'address_test_table', type_='unique')
    op.create_index(op.f('ix_address_test_table_id'), 'address_test_table', ['id'], unique=False)
    op.add_column('contacts', sa.Column('first_name', sa.String(length=50), nullable=False))
    op.add_column('contacts', sa.Column('last_name', sa.String(length=50), nullable=False))
    op.add_column('contacts', sa.Column('phone_number', sa.String(length=20), nullable=True))
    op.add_column('contacts', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('contacts', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.alter_column('contacts', 'email',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('contacts', 'message',
               existing_type=sa.TEXT(),
               nullable=False)
    op.create_index(op.f('ix_contacts_id'), 'contacts', ['id'], unique=False)
    op.drop_column('contacts', 'lastname')
    op.drop_column('contacts', 'firstname')
    op.drop_column('contacts', 'phonenumber')
    op.add_column('favorites', sa.Column('id', sa.Integer(), nullable=False))
    op.add_column('favorites', sa.Column('listing_id', sa.Integer(), nullable=False))
    op.add_column('favorites', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('favorites', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.create_index(op.f('ix_favorites_id'), 'favorites', ['id'], unique=False)
    op.drop_constraint('favorites_property_id_fkey', 'favorites', type_='foreignkey')
    op.create_foreign_key(None, 'favorites', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'favorites', 'property_listings', ['listing_id'], ['id'])
    op.drop_column('favorites', 'property_id')
    op.add_column('property_listing_test_table', sa.Column('date_posted', sa.DateTime(), nullable=True))
    op.add_column('property_listing_test_table', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.alter_column('property_listing_test_table', 'price',
               existing_type=sa.NUMERIC(),
               type_=sa.BigInteger(),
               nullable=False)
    op.alter_column('property_listing_test_table', 'square_feet',
               existing_type=sa.NUMERIC(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.alter_column('property_listing_test_table', 'sale_status',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               nullable=False)
    op.alter_column('property_listing_test_table', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('property_listing_test_table', 'address_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_constraint('unique_property_listing_constraint', 'property_listing_test_table', type_='unique')
    op.create_index(op.f('ix_property_listing_test_table_id'), 'property_listing_test_table', ['id'], unique=False)
    op.drop_constraint('property_listing_test_table_address_id_fkey1', 'property_listing_test_table', type_='foreignkey')
    op.create_foreign_key(None, 'property_listing_test_table', 'address', ['address_id'], ['id'])
    op.add_column('property_listings', sa.Column('realtor_link', sa.Text(), nullable=True))
    op.add_column('property_listings', sa.Column('date_posted', sa.DateTime(), nullable=True))
    op.add_column('property_listings', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.alter_column('property_listings', 'price',
               existing_type=sa.NUMERIC(),
               type_=sa.BigInteger(),
               nullable=False)
    op.alter_column('property_listings', 'sale_status',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               nullable=False)
    op.alter_column('property_listings', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('property_listings', 'address_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.create_index(op.f('ix_property_listings_id'), 'property_listings', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_property_listings_id'), table_name='property_listings')
    op.alter_column('property_listings', 'address_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('property_listings', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('property_listings', 'sale_status',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('property_listings', 'price',
               existing_type=sa.BigInteger(),
               type_=sa.NUMERIC(),
               nullable=True)
    op.drop_column('property_listings', 'updated_at')
    op.drop_column('property_listings', 'date_posted')
    op.drop_column('property_listings', 'realtor_link')
    op.drop_constraint(None, 'property_listing_test_table', type_='foreignkey')
    op.create_foreign_key('property_listing_test_table_address_id_fkey1', 'property_listing_test_table', 'address_test_table', ['address_id'], ['id'])
    op.drop_index(op.f('ix_property_listing_test_table_id'), table_name='property_listing_test_table')
    op.create_unique_constraint('unique_property_listing_constraint', 'property_listing_test_table', ['address_id', 'price', 'sale_status'])
    op.alter_column('property_listing_test_table', 'address_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('property_listing_test_table', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('property_listing_test_table', 'sale_status',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('property_listing_test_table', 'square_feet',
               existing_type=sa.Integer(),
               type_=sa.NUMERIC(),
               existing_nullable=True)
    op.alter_column('property_listing_test_table', 'price',
               existing_type=sa.BigInteger(),
               type_=sa.NUMERIC(),
               nullable=True)
    op.drop_column('property_listing_test_table', 'updated_at')
    op.drop_column('property_listing_test_table', 'date_posted')
    op.add_column('favorites', sa.Column('property_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'favorites', type_='foreignkey')
    op.drop_constraint(None, 'favorites', type_='foreignkey')
    op.create_foreign_key('favorites_property_id_fkey', 'favorites', 'property_listings', ['property_id'], ['id'])
    op.drop_index(op.f('ix_favorites_id'), table_name='favorites')
    op.drop_column('favorites', 'updated_at')
    op.drop_column('favorites', 'created_at')
    op.drop_column('favorites', 'listing_id')
    op.drop_column('favorites', 'id')
    op.add_column('contacts', sa.Column('phonenumber', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('contacts', sa.Column('firstname', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('contacts', sa.Column('lastname', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_contacts_id'), table_name='contacts')
    op.alter_column('contacts', 'message',
               existing_type=sa.TEXT(),
               nullable=True)
    op.alter_column('contacts', 'email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('contacts', 'updated_at')
    op.drop_column('contacts', 'created_at')
    op.drop_column('contacts', 'phone_number')
    op.drop_column('contacts', 'last_name')
    op.drop_column('contacts', 'first_name')
    op.drop_index(op.f('ix_address_test_table_id'), table_name='address_test_table')
    op.create_unique_constraint('unique_address_constraint', 'address_test_table', ['country', 'administrative_area', 'sub_administrative_area', 'locality', 'postal_code', 'street', 'premise', 'sub_premise'])
    op.alter_column('address_test_table', 'street',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('address_test_table', 'postal_code',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('address_test_table', 'locality',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('address_test_table', 'administrative_area',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('address_test_table', 'country',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('address_test_table', 'updated_at')
    op.drop_column('address_test_table', 'created_at')
    op.drop_column('address_test_table', 'longitude')
    op.drop_column('address_test_table', 'latitude')
    op.drop_index(op.f('ix_address_id'), table_name='address')
    op.alter_column('address', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('address', 'longitude',
               existing_type=sa.DECIMAL(precision=10, scale=7),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.alter_column('address', 'latitude',
               existing_type=sa.DECIMAL(precision=10, scale=7),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.alter_column('address', 'street',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('address', 'postal_code',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('address', 'locality',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('address', 'administrative_area',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('address', 'country',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('address', 'updated_at')
    op.create_table('addresses',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('country', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('administrative_area', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('sub_administrative_area', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('locality', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('postal_code', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('street', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('premise', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('sub_premise', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='addresses_pkey')
    )
    op.create_index('ix_addresses_id', 'addresses', ['id'], unique=False)
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
